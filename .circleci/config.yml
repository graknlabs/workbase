version: 2.1
commands:
  bazel_install:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-linux-x86_64.sh
            chmod +x bazel-0.20.0-installer-linux-x86_64.sh
            sudo ./bazel-0.20.0-installer-linux-x86_64.sh

  bazel-install-macos:
    steps:
      - run:
          name: Bazel - Install (macOS)
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-darwin-x86_64.sh
            chmod +x bazel-0.20.0-installer-darwin-x86_64.sh
            sudo ./bazel-0.20.0-installer-darwin-x86_64.sh

  bazel_add_rbe_credential:
    steps:
      - run:
          name: Bazel - Add RBE Credential
          command: |
            if [[ -n "$BAZEL_RBE_CREDENTIAL" ]]; then
              BAZEL_RBE_CREDENTIAL_LOCATION=~/.config/gcloud/application_default_credentials.json
              echo "An RBE credential is found and will be saved to $BAZEL_RBE_CREDENTIAL_LOCATION. Bazel will be executed with RBE support."
              mkdir -p ~/.config/gcloud/
              echo $BAZEL_RBE_CREDENTIAL > "$BAZEL_RBE_CREDENTIAL_LOCATION"
            else
              echo "No RBE credential found. Bazel will be executed locally without RBE support."
            fi

  bazel:
    parameters:
      command:
          type: string
    steps:
      - run:
          name: Bazel - Execute
          command: |
            if [[ -f ~/.config/gcloud/application_default_credentials.json ]]; then
              echo "Bazel will be executed with RBE support. This means the build is remotely executed and the cache will be re-used by subsequent CI jobs."
              CMD="<< parameters.command >> --config=rbe"
            else
              echo "Bazel will be executed locally (without RBE support)."
              CMD="<< parameters.command >>"
            fi
            echo "Executing $CMD"
            $CMD

  run-grakn-server:
    steps:
      - run: bazel build @graknlabs_grakn//:distribution
      - run: unzip bazel-genfiles/external/graknlabs_grakn/grakn-core-all.zip -d bazel-genfiles/dist/
      - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
      - run: bazel-genfiles/dist/grakn-core-all/grakn console -f `pwd`/test/helpers/basic-genealogy.gql -k gene

jobs:
  test:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      # - bazel_add_rbe_credential
      - run: bazel run @nodejs//:npm install
      - run: sudo apt install xvfb libxtst6 libxss1 libgtk2.0-0 -y
      - run: sudo apt install libnss3 libasound2 libgconf-2-4 -y
      - run-grakn-server
      - run: Xvfb :99 &
      - run: export DISPLAY=:99
      # - run: bazel run @nodejs//:npm test
      # - run: bazel run @nodejs//:npm run e2e

  approve-release:
    machine: true
    steps:
      - checkout
      - run: python .circleci/approve-release.py

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete origin trigger-ci-release


  build-workbase-win:
    machine: true
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - checkout
      - run:
          name: Installing sshpass
          command: sudo apt-get update && sudo apt-get install sshpass
      - run:
          name: Configuring GCP credentials
          command: |
              echo "$GCP_CREDENTIAL" > /tmp/gcp-credential.json
              gcloud auth activate-service-account --key-file /tmp/gcp-credential.json
              gcloud config set project grakn-dev
              gcloud config set compute/zone europe-west1-b
      - run:
          name: Generating password for instance
          command: openssl rand -base64 12 > /tmp/instance-password
      - run:
          name: Generating bootup script for instance
          command: sed -e "s|INSTANCE_PASSWORD|$(cat /tmp/instance-password)|g" .circleci/templates/setup.ps1 > /tmp/instance-setup.ps1
      - run:
          name: Provisioning instance
          command: gcloud compute instances create circleci-$CIRCLE_JOB-$CIRCLE_BUILD_NUM --image-project windows-cloud --image-family windows-2019 --machine-type n1-standard-1 --metadata-from-file sysprep-specialize-script-ps1=/tmp/instance-setup.ps1
      - run:
          name: Storing instance's external IP
          command: gcloud --format="value(networkInterfaces[0].accessConfigs[0].natIP)" compute instances list --filter="name=circleci-$CIRCLE_JOB-$CIRCLE_BUILD_NUM" > /tmp/instance-ip
      - run:
          name: Waiting for instance to some alive (sshd)
          command: ./.circleci/wait-for-ssh.py $(cat /tmp/instance-ip) circleci $(cat /tmp/instance-password)
      - run:
          name: Executing command remotely [dir]
          command: sshpass -p $(cat /tmp/instance-password) ssh "circleci@$(cat /tmp/instance-ip)" dir
      - run:
          name: Executing PowerShell command remotely [Get-LocalUser]
          command: sshpass -p $(cat /tmp/instance-password) ssh "circleci@$(cat /tmp/instance-ip)" powershell Get-LocalUser
      - run:
          name: Remove instance
          command: gcloud --quiet compute instances delete circleci-$CIRCLE_JOB-$CIRCLE_BUILD_NUM --delete-disks=all
          when: always

  build-workbase-linux:
    machine: true
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - checkout
      - bazel_install
      - run:
          name: npm install
          command: bazel run @nodejs//:npm install
      - run:
          name: npm run build
          command: bazel run @nodejs//:npm run build
      # TODO: make a separate rule for building on Linux / use another naming scheme
      - run: mkdir -p ~/grakn/artifacts && mv ./build/*.tar.gz ~/grakn/artifacts/grakn-workbase-$(cat VERSION)-linux.tar.gz
      - persist_to_workspace:
          root: ~/grakn
          paths:
            - artifacts/*-linux.tar.gz
            - VERSION

  build-workbase-mac:
    macos:
        xcode: "9.0"
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - checkout
      - bazel-install-macos
      - run-grakn-server
      - run:
          name: npm install
          command: bazel run @nodejs//:npm install
      - run:
          name: npm run build
          command: CSC_LINK="$APPLE_CODE_SIGNING_CERTIFICATE_URL" CSC_KEY_PASSWORD="$APPLE_CODE_SIGNING_PASSWORD" bazel run @nodejs//:npm run build
      # - run:
      #     name: npm run e2e
      #     command: bazel run @nodejs//:npm run e2e
      - run: mkdir -p ~/grakn/artifacts && mv ./build/*.zip ~/grakn/artifacts/grakn-workbase-$(cat VERSION)-mac.zip
      - persist_to_workspace:
          root: ~/grakn
          paths:
            - artifacts/*-mac.zip
  publish-github-draft:
    docker:
      - image: cibuilds/github:0.10
    working_directory: ~/grakn
    steps:
      - attach_workspace:
          at: ~/grakn
      - run:
          name: "Publish Draft Release on GitHub"
          command: |
            ghr -t ${GRABL_CREDENTIAL} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -draft v$(cat VERSION) ./artifacts


workflows:
  version: 2
  # TODO: include 'build-workbase-win' job
  ci-pull-request:
    jobs:
      - test:
          filters:
            branches:
              ignore: /master|trigger-ci-release/
  ci-master-branch:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - approve-release:
          requires:
            - test
          filters:
            branches:
              only: master
  ci-release:
    jobs:
      - build-workbase-mac:
          filters:
            branches:
              only: trigger-ci-release
      - build-workbase-linux:
          filters:
            branches:
              only: trigger-ci-release
      - publish-github-draft:
          requires:
            - build-workbase-mac
            - build-workbase-linux
          filters:
            branches:
              only: trigger-ci-release
      - release-cleanup:
          requires:
            - publish-github-draft
          filters:
            branches:
              only: trigger-ci-release
